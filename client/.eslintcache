[{"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\index.tsx":"1","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\userContext.ts":"3","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\HomeSvg.tsx":"4","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\NotFound.tsx":"5","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Login.tsx":"6","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Signup.tsx":"7","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\userAuth.ts":"8","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\AuthRoute.tsx":"9","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\Unauthorized.tsx":"10","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\resident_pages\\ResidentLanding.tsx":"11","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\toastContext.ts":"12","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\jwtFunctions.ts":"13","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\admin_pages\\AdminLanding.tsx":"14","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\ColorButton.tsx":"15","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\StyledRadio.tsx":"16"},{"size":6102,"mtime":1610740783338,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":567,"mtime":1609819322236,"results":"20","hashOfConfig":"18"},{"size":10952,"mtime":1609559326769,"results":"21","hashOfConfig":"18"},{"size":1127,"mtime":1609634024347,"results":"22","hashOfConfig":"18"},{"size":13160,"mtime":1610744039251,"results":"23","hashOfConfig":"18"},{"size":13170,"mtime":1610744185682,"results":"24","hashOfConfig":"18"},{"size":1092,"mtime":1610742738200,"results":"25","hashOfConfig":"18"},{"size":1251,"mtime":1609977419468,"results":"26","hashOfConfig":"18"},{"size":1122,"mtime":1609731269402,"results":"27","hashOfConfig":"18"},{"size":2483,"mtime":1609989807875,"results":"28","hashOfConfig":"18"},{"size":764,"mtime":1609815128733,"results":"29","hashOfConfig":"18"},{"size":1643,"mtime":1609989615227,"results":"30","hashOfConfig":"18"},{"size":19008,"mtime":1610921820229,"results":"31","hashOfConfig":"18"},{"size":308,"mtime":1610743882610,"results":"32","hashOfConfig":"18"},{"size":314,"mtime":1610744101506,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"iklqvo",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\index.tsx",[],["69","70"],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\userContext.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\HomeSvg.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\NotFound.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Login.tsx",["71"],"import { makeStyles, TextField, Theme } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport HomeSvg from \"../../components/HomeSvg\";\r\nimport { useToastContext } from \"../../context/toastContext\";\r\nimport \"../../App.css\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { LogoutApi } from \"../../authentication/jwtFunctions\";\r\nimport { ColorButton } from \"../../components/ColorButton\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  textField: {\r\n    color: \"#8a6565 !important\",\r\n    backgroundColor: \"white !important\",\r\n    \"& MuiFormLabel-root.Mui-focused\": {\r\n      color: \"#8a6565\",\r\n      backgroundColor: \"white\",\r\n    },\r\n    \"&:focus\": {\r\n      color: \"#8a6565\",\r\n      backgroundColor: \"white\",\r\n    },\r\n    \"&:after\": {\r\n      borderBottom: `2px solid #8a6565`,\r\n      backgroundColor: \"white\",\r\n    },\r\n    \"&:hover\": {\r\n      color: \"#8a6565\",\r\n      backgroundColor: \"white\",\r\n    },\r\n    \"&:selected\": {\r\n      color: \"#8a6565\",\r\n      backgroundColor: \"white\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const {\r\n    registerSuccess,\r\n    toggleRegisterSuccess,\r\n    logoutSuccess,\r\n    toggleLogoutSuccess,\r\n    loginSuccess,\r\n    toggleLoginSuccess,\r\n  } = useToastContext();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const cookies = new Cookies();\r\n\r\n  // States kept track of for the login form\r\n  const [formEmail, setFormEmail] = useState<string>(\"\");\r\n  const [formPassword, setFormPassword] = useState<string>(\"\");\r\n  const [isLoggedIn, setLoggedIn] = useState<boolean>(false);\r\n\r\n  /**\r\n   * Renders in a toast\r\n   */\r\n  useEffect(() => {\r\n    if (registerSuccess) {\r\n      toast.success(\"Successfully Registered\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      toggleRegisterSuccess(false);\r\n    }\r\n    if (logoutSuccess) {\r\n      toast.dark(\"Successfully Logged Out\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      toggleLogoutSuccess(false);\r\n    }\r\n    if (cookies.get(\"usertype\") != null) {\r\n      setLoggedIn(cookies.get(\"success\"));\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Form change listener that updates state on change\r\n   * @param e Change listener\r\n   * @param formID Marks which state to update\r\n   */\r\n  function onFormChange(\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    formID: string\r\n  ) {\r\n    e.preventDefault();\r\n    if (formID === \"email\") {\r\n      setFormEmail(e.target.value);\r\n    } else if (formID === \"password\") {\r\n      setFormPassword(e.target.value);\r\n    }\r\n  }\r\n\r\n  const submit = async (e: { preventDefault: () => void }) => {\r\n    e.preventDefault();\r\n\r\n    const userData = {\r\n      email: formEmail,\r\n      password: formPassword,\r\n    };\r\n\r\n    try {\r\n      await axios({\r\n        method: \"POST\",\r\n        url: \"http://localhost:5000/api/login\",\r\n        data: userData,\r\n        headers: { \"content-type\": \"application/json\" },\r\n      }).then((res) => {\r\n        toggleLoginSuccess(true);\r\n        resetForm();\r\n        console.log(res);\r\n        if (res.data.success) {\r\n          setLoggedIn(res.data.success);\r\n          cookies.set(\"token\", res.data.token, {\r\n            // sameSite: \"strict\",\r\n            // httpOnly: true,\r\n            // secure: true,\r\n            // expires: new Date(Date.now()+3600\r\n          });\r\n          cookies.set(\"email\", res.data.message.email, {\r\n            // sameSite: \"strict\",\r\n            // httpOnly: true,\r\n            // secure: true,\r\n            // maxAge: 3600,\r\n          });\r\n          cookies.set(\"displayname\", res.data.message.displayName, {\r\n            // sameSite: \"strict\",\r\n            // httpOnly: true,\r\n            // secure: true,\r\n            // maxAge: 3600,\r\n          });\r\n          cookies.set(\"usertype\", res.data.message.userType, {\r\n            // sameSite: \"strict\",\r\n            // httpOnly: true,\r\n            // secure: true,\r\n            // maxAge: 3600,\r\n          });\r\n          cookies.set(\"success\", res.data.success, {\r\n            // sameSite: \"strict\",\r\n            // httpOnly: true,\r\n            // secure: true,\r\n            // maxAge: 3600,\r\n          });\r\n          if (res.data.message.userType === \"resident\") {\r\n            console.log(\"Successfully Logged In\");\r\n            history.push(\"/resident_dashboard\");\r\n          } else if (res.data.message.userType === \"attendee\") {\r\n            console.log(\"Successfully Logged In\");\r\n            history.push(\"/attendee_dashboard\");\r\n          } else if (res.data.message.userType === \"nurse\") {\r\n            console.log(\"Successfully Logged In\");\r\n            history.push(\"/nurse_dashboard\");\r\n          } else if (res.data.message.userType === \"admin\") {\r\n            console.log(\"Successfully Logged In\");\r\n            history.push(\"/admin\");\r\n          } else if (res.data.message.userType === \"superAdmin\") {\r\n            console.log(\"Successfully Logged In\");\r\n            history.push(\"/admin\");\r\n          }\r\n        }\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    if (!loginSuccess) {\r\n      toast.dark(\"Invalid Login Credentials\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n\r\n    resetForm();\r\n  };\r\n\r\n  function resetForm() {\r\n    setFormEmail(\"\");\r\n    setFormPassword(\"\");\r\n  }\r\n\r\n  async function logout(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    await LogoutApi();\r\n    toggleLogoutSuccess(true);\r\n    setLoggedIn(false);\r\n  }\r\n\r\n  function GoToDashboard() {\r\n    if (cookies.get(\"usertype\") === \"resident\") {\r\n      return (\r\n        <Link to=\"/resident_dashboard\" className=\"lg:text-lg\">\r\n          <text className=\"text-white lg:text-crimson\">\r\n            Go to dashboard -{\">\"}\r\n          </text>\r\n        </Link>\r\n      );\r\n    } else if (cookies.get(\"usertype\") === \"attendee\") {\r\n      return (\r\n        <Link to=\"/attendee_dashboard\" className=\"lg:text-lg\">\r\n          <text className=\"text-white lg:text-crimson\">\r\n            Go to dashboard -{\">\"}\r\n          </text>\r\n        </Link>\r\n      );\r\n    } else if (cookies.get(\"usertype\") === \"nurse\") {\r\n      return (\r\n        <Link to=\"/nurse_dashboard\" className=\"lg:text-lg\">\r\n          <text className=\"text-white lg:text-crimson\">\r\n            Go to dashboard -{\">\"}\r\n          </text>\r\n        </Link>\r\n      );\r\n    } else if (\r\n      cookies.get(\"usertype\") === \"admin\" ||\r\n      cookies.get(\"usertype\") === \"superAdmin\"\r\n    ) {\r\n      return (\r\n        <Link to=\"/admin\" className=\"lg:text-lg\">\r\n          <text className=\"text-white lg:text-crimson\">\r\n            Go to dashboard -{\">\"}\r\n          </text>\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <text className=\"text-white lg:text-crimson\">\r\n          Error, please log out. User type not found\r\n        </text>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (isLoggedIn) {\r\n    return (\r\n      <div className=\"lg:grid lg:grid-cols-3 lg:bg-none lg:pt-0 lg:px-0 lg:justify-items-stretch lg:text-black text-white h-screen w-full flex flex-col pt-5 px-3 overflow-hidden bg-login-img justify-items-center items-center text-white\">\r\n        <div className=\"lg:col-span-2 lg:h-screen lg:bg-login-img lg:bg-cover lg:bg-no-repeat lg:bg-center\">\r\n          <div className=\"lg:mt-6 lg:ml-6 lg:text-4xl font-quicksand flex flex-row items-center\">\r\n            <HomeSvg />\r\n            <h1 className=\"lg:text-white text-xl sm:text-4xl\">\r\n              Track your time in Residency\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"lg:shadow-2xl lg:shadow-inner lg:h-screen lg:grid lg:justify-items-center lg:w-full w-full sm:w-9/12\">\r\n          <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n          <div className=\"enter-anim lg:block lg:rounded-lg lg:shadow-2xl lg:w-3/4 lg:bg-white lg:h-64 sm:flex-col sm:flex lg:p-6\">\r\n            <h1 className=\"lg:text-4xl lg:text-crimson text-white\">\r\n              Welcome back\r\n            </h1>\r\n            <h1 className=\"lg:text-4xl text-white lg:text-black\">\r\n              {cookies.get(\"displayname\")}\r\n            </h1>\r\n            <h2 className=\"lg:text-2xl\">\r\n              <text className=\"lg:text-lightGrey\">\r\n                You are already logged in\r\n              </text>\r\n            </h2>\r\n            {GoToDashboard()}\r\n            <div>\r\n              <ColorButton className=\"w-full\" onClick={(e) => logout(e)}>\r\n                Logout\r\n              </ColorButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"lg:grid lg:grid-cols-3 lg:bg-none lg:pt-0 lg:px-0 lg:justify-items-stretch lg:text-black text-white h-screen w-full flex flex-col pt-5 px-3 overflow-hidden bg-login-img justify-items-center items-center text-white\">\r\n        <div className=\"lg:col-span-2 lg:h-screen lg:bg-login-img lg:bg-cover lg:bg-no-repeat lg:bg-center\">\r\n          <div className=\"lg:mt-6 lg:ml-6 lg:text-4xl font-quicksand flex flex-row items-center\">\r\n            <HomeSvg />\r\n            <h1 className=\"lg:text-white text-xl sm:text-4xl\">\r\n              Track your time in Residency\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"lg:shadow-2xl lg:shadow-inner lg:h-screen lg:grid lg:justify-items-center lg:w-full w-full sm:w-9/12\">\r\n          <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n          <div className=\"enter-anim lg:block lg:rounded-lg lg:shadow-2xl lg:w-3/4 lg:bg-white sm:flex-col sm:flex lg:p-6\">\r\n            <h1 className=\"xl:text-4xl lg:text-left text-center text-2xl sm:text-3xl lg:text-crimson text-white\">\r\n              Welcome back\r\n            </h1>\r\n            <h2 className=\"lg:text-left lg:text-3xl text-center text-2xl xl:text-4xl sm:text-3xl\">\r\n              <text className=\"text-lightGrey\">Login</text> /{\" \"}\r\n              <Link to=\"/register\">Sign up</Link>\r\n            </h2>\r\n            <form className=\"lg:pt-4 pt-20\" onSubmit={submit}>\r\n              <div className=\"w-full\">\r\n                <div className=\"pb-2\">\r\n                  <TextField\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    variant=\"filled\"\r\n                    className=\"w-full\"\r\n                    value={formEmail}\r\n                    required\r\n                    onChange={(\r\n                      e: React.ChangeEvent<\r\n                        HTMLInputElement | HTMLTextAreaElement\r\n                      >\r\n                    ) => onFormChange(e, \"email\")}\r\n                    InputProps={{\r\n                      className: classes.textField,\r\n                    }}\r\n                    InputLabelProps={{\r\n                      className: classes.textField,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"pb-2\">\r\n                  <TextField\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    variant=\"filled\"\r\n                    className=\"w-full\"\r\n                    value={formPassword}\r\n                    type=\"password\"\r\n                    required\r\n                    defaultValue=\"\"\r\n                    onChange={(\r\n                      e: React.ChangeEvent<\r\n                        HTMLInputElement | HTMLTextAreaElement\r\n                      >\r\n                    ) => onFormChange(e, \"password\")}\r\n                    InputProps={{\r\n                      className: classes.textField,\r\n                    }}\r\n                    InputLabelProps={{\r\n                      className: classes.textField,\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <ColorButton\r\n                  variant=\"contained\"\r\n                  className=\"w-full\"\r\n                  type=\"submit\"\r\n                  onSubmit={submit}\r\n                >\r\n                  Login\r\n                </ColorButton>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Signup.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\userAuth.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\AuthRoute.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\Unauthorized.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\resident_pages\\ResidentLanding.tsx",["72"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { useToastContext } from \"../../context/toastContext\";\r\nimport Cookies from \"universal-cookie\";\r\nimport refreshToken, { LogoutApi } from \"../../authentication/jwtFunctions\";\r\n\r\nexport default function ResidentLanding() {\r\n  const cookies = new Cookies();\r\n  const { loginSuccess, toggleLoginSuccess } = useToastContext();\r\n\r\n  const [id, setID] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [displayName, setDisplayName] = useState<string>(\"\");\r\n  const [userType, setUserType] = useState<string>(\"\");\r\n  const [token, setToken] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (loginSuccess) {\r\n      toast.success(\"Login Successful\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      toggleLoginSuccess(false);\r\n    }\r\n  });\r\n\r\n  function loadData() {\r\n    try {\r\n      refreshToken(); // checks if token is expired, if so refresh\r\n\r\n      const userData = {\r\n        email: cookies.get(\"email\"),\r\n      };\r\n      axios({\r\n        method: \"POST\",\r\n        data: userData,\r\n        url: \"http://localhost:5000/api/getuserdata\",\r\n        headers: { \"x-access-token\": cookies.get(\"token\") },\r\n      }).then((res) => {\r\n        setEmail(res.data.email);\r\n        setPassword(res.data.password);\r\n        setID(res.data._id);\r\n        setDisplayName(res.data.displayName);\r\n        setUserType(res.data.userType);\r\n        setToken(res.data.token);\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick={false}\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <button onClick={(e) => loadData()}>Click me</button>\r\n      <div>\r\n        <h1>Resident Landing Page</h1>\r\n        <h1>Hello, {displayName}</h1>\r\n        <h1>{id}</h1>\r\n        <h1>{email}</h1>\r\n        <h1>{password}</h1>\r\n        <h1>{displayName}</h1>\r\n        <h1>{userType}</h1>\r\n        <h1>{token}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\toastContext.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\jwtFunctions.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\admin_pages\\AdminLanding.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\ColorButton.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\StyledRadio.tsx",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":61,"column":3,"nodeType":"79","endLine":61,"endColumn":12,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":6,"column":24,"nodeType":"79","messageId":"83","endLine":6,"endColumn":33},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoggedIn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess] as a second argument to the useEffect Hook.","Identifier",["86"],"@typescript-eslint/no-unused-vars","'LogoutApi' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Add dependencies array: [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess]",{"range":"89","text":"90"},[2562,2562],", [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess]"]