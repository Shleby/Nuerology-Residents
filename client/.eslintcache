[{"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\index.tsx":"1","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\userContext.ts":"3","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\HomeSvg.tsx":"4","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\NotFound.tsx":"5","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Login.tsx":"6","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Signup.tsx":"7","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\userAuth.ts":"8","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\AuthRoute.tsx":"9","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\Unauthorized.tsx":"10","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\resident_pages\\ResidentLanding.tsx":"11","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\toastContext.ts":"12","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\jwtFunctions.ts":"13"},{"size":6037,"mtime":1609976715797,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":567,"mtime":1609819322236,"results":"17","hashOfConfig":"15"},{"size":10952,"mtime":1609559326769,"results":"18","hashOfConfig":"15"},{"size":1127,"mtime":1609634024347,"results":"19","hashOfConfig":"15"},{"size":10695,"mtime":1610392559410,"results":"20","hashOfConfig":"15"},{"size":13351,"mtime":1609999893625,"results":"21","hashOfConfig":"15"},{"size":1092,"mtime":1609642128581,"results":"22","hashOfConfig":"15"},{"size":1251,"mtime":1609977419468,"results":"23","hashOfConfig":"15"},{"size":1122,"mtime":1609731269402,"results":"24","hashOfConfig":"15"},{"size":2483,"mtime":1609989807875,"results":"25","hashOfConfig":"15"},{"size":764,"mtime":1609815128733,"results":"26","hashOfConfig":"15"},{"size":1643,"mtime":1609989615227,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"iklqvo",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\index.tsx",[],["57","58"],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\userContext.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\HomeSvg.tsx",[],["59","60"],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\NotFound.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Login.tsx",["61"],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\authPages\\Signup.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\userAuth.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\components\\AuthRoute.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\Unauthorized.tsx",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\pages\\resident_pages\\ResidentLanding.tsx",["62"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { useToastContext } from \"../../context/toastContext\";\r\nimport Cookies from \"universal-cookie\";\r\nimport refreshToken, { LogoutApi } from \"../../authentication/jwtFunctions\";\r\n\r\nexport default function ResidentLanding() {\r\n  const cookies = new Cookies();\r\n  const { loginSuccess, toggleLoginSuccess } = useToastContext();\r\n\r\n  const [id, setID] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [displayName, setDisplayName] = useState<string>(\"\");\r\n  const [userType, setUserType] = useState<string>(\"\");\r\n  const [token, setToken] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (loginSuccess) {\r\n      toast.success(\"Login Successful\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      toggleLoginSuccess(false);\r\n    }\r\n  });\r\n\r\n  function loadData() {\r\n    try {\r\n      refreshToken(); // checks if token is expired, if so refresh\r\n\r\n      const userData = {\r\n        email: cookies.get(\"email\"),\r\n      };\r\n      axios({\r\n        method: \"POST\",\r\n        data: userData,\r\n        url: \"http://localhost:5000/api/getuserdata\",\r\n        headers: { \"x-access-token\": cookies.get(\"token\") },\r\n      }).then((res) => {\r\n        setEmail(res.data.email);\r\n        setPassword(res.data.password);\r\n        setID(res.data._id);\r\n        setDisplayName(res.data.displayName);\r\n        setUserType(res.data.userType);\r\n        setToken(res.data.token);\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick={false}\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <button onClick={(e) => loadData()}>Click me</button>\r\n      <div>\r\n        <h1>Resident Landing Page</h1>\r\n        <h1>Hello, {displayName}</h1>\r\n        <h1>{id}</h1>\r\n        <h1>{email}</h1>\r\n        <h1>{password}</h1>\r\n        <h1>{displayName}</h1>\r\n        <h1>{userType}</h1>\r\n        <h1>{token}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\context\\toastContext.ts",[],"C:\\Users\\Shelby\\Desktop\\code\\Nuerology-Residents\\client\\src\\authentication\\jwtFunctions.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":66,"column":3,"nodeType":"71","endLine":66,"endColumn":12,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":6,"column":24,"nodeType":"71","messageId":"75","endLine":6,"endColumn":33},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoggedIn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess] as a second argument to the useEffect Hook.","Identifier",["78"],"@typescript-eslint/no-unused-vars","'LogoutApi' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Add dependencies array: [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess]",{"range":"81","text":"82"},[2538,2538],", [registerSuccess, logoutSuccess, cookies, toggleRegisterSuccess, toggleLogoutSuccess]"]